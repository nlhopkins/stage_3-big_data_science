diff = ((expected_size - actual_size) / expected_size * 100) # % difference between expected and actual sizes
)
# Join gDNA & cDNA datasets for visualisation later on
pcr_full <- full_join(gdna, cdna, by = NULL)
# Save processed PCR data
write.csv(pcr_full, 'data/data-processed/pcr.csv')
# ggplot2 column plot of the merged PCR data showing the expressed genes and the percentage difference of actual size to expected size.
pcr_plot <- pcr_full %>%
ggplot(aes(
x = gene,
y = diff,
fill = library,
text = paste(
"Library: ",
library,
"<br>Amplicon: ",
gene,
"<br>Difference: ",
round(diff),
"%",
"<br>Expected Size (bp): ",
expected_size,
"<br>Actual Size (bp):",
round(actual_size)
)
)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 0.25) +
mytheme() +
scale_fill_brewer(name = "DNA Library",
labels = c("cDNA", "gDNA"),
palette = "Set3",) +
labs(y = "Percentage Difference to Expected Size",
x = "Amplicon")
ggsave(
"figures/pcr_plot.pdf",
plot = pcr_plot,
height = 15,
width = 20,
unit = "cm"
)
# Make this interactive
ggplotly(pcr_plot, tooltip = c("text"), align = "center")
knitr::include_graphics("images/pcr.png")
# Kable table of the full PCR dataset with the calculated values.
pcr_full %>%
select(-primer, -gel_length) %>%
knitr::kable(
caption = "The actual amplicon sizes were calculated using the linear regression equation \\@ref(eq:log) acquired by linear regression analysis of the PCR ladder bands. Size Difference compares the expected and actual amplicon sizes.",
booktabs = T,
digits = 2,
col.names = c(
"Library",
"Amplicon",
"Distance (cm)",
"Expected Size (bp)",
"Relative Front (Rf)",
"Log(Rf)",
"Actual Size (bp)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 1) %>%
kable_styling(font_size = 15, position = "center")
knitr::include_graphics("images/western_blot.png")
# Calculate the relative front and log10 weight for the SDS calibration data.
sds_calibration <- sds_calibration %>%
mutate(rf = (
(sds_calibration$gel_length - sds_calibration$distance) / sds_calibration$gel_length
),
log = log10(weight_da))
# Save processed sds data
write.csv (sds_calibration,
'data/data-processed/sds_calibration.csv')
# Linear model of SDS log ~ rf to use in y=mx+c to predict sample weights.
sds_mod <- lm(sds_calibration$log ~ sds_calibration$rf)
# Calculate the relative front (Rf), log = y=mx+c, 10^log = actual weight, and percentage difference to the predicted weight for the samples.
sds <- sds %>%
mutate(
rf = ((gel_length - distance) / gel_length),
log = ((rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = 10 ^ log,
diff = ((expected_weight - actual_weight) / expected_weight) * 100
)
# Kable table of the SDS data with calculated values.
sds %>% select(-log, -gel_length, -distance) %>%
knitr::kable(
caption = "Molecular weight was determined using Rf of bands and the linear regression equation acquired by the linear regression analysis of the MW ladder bands. Expected weights were obtained by ExPASy ProtParam.",
booktabs = T,
digits = 2,
col.names = c(
"Column",
"Sample",
"Expected Weight (Da)",
"Relative Front (Rf)",
"Actual Weight (Da)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 3) %>%
kable_styling(font_size = 15, position = "center")
# Prepare the calibration data by calculating the Rf and log10(expected size)
emsa_calibration <-
emsa_calibration %>% mutate(log = log10(expected_size),
rf = relative_front(emsa_calibration))
# Prepare the PCR dataset for analysis by calculating the relative front.
emsa <-
emsa %>% mutate(rf = (relative_front(emsa))) # calculate the relative front
# Calculate the difference between the measured rf and predicted rf value
# This is needed for the residuals
# Calculate residuals to the fit
emsa <- emsa %>%
mutate(residuals = rf - predict(NLS(emsa)))
# Save processed data
write.csv (emsa, 'data/data-processed/emsa.csv')
# Extract the Kd from the NLS for inline reporting.
kd <- summary(NLS(emsa))$coefficients[2, 1]
# Linear regression of the EMSA calibration data rf ~ log. Coefficients will be used to predict the size of HiGam + DNA.
emsa_lm <- lm(emsa_calibration$log ~ emsa_calibration$rf)
# Predict footpring using predicted HiGam size (y=mx+c), the avg weight of 500bp DNA (330000), and the weight of dimeric HiGam (30626.5 / 2).
emsa <- emsa %>%
mutate(log = 1000 * ((rf * as.numeric(
emsa_lm$coefficients[2]
)) + as.numeric(emsa_lm$coefficients[1])))
emsa_footprint <-
(500 / abs(((
max(emsa$log) - 330000
)) / (30626.5 / 2)))
emsa_plot <- emsa %>%
ggplot(aes(x = conc, y = rf)) +
geom_point(shape = 20,
size = 3) +
stat_function(fun = emsa_pred_intercept, colour = "#66C2A4") +
mytheme() +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(0.3, 0.7),
breaks = seq(0.3, 0.7, by = 0.20)
) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1)
) +
xlab(NULL) +
ylab(expression(paste(bold(
"Relative Front (a.U.)"
))))
# Plot the residuals and a line showing y = 0
emsa_res_plot <- emsa %>%
ggplot(aes(x = conc, y = residuals)) +
geom_point(shape = 20,
size = 3,
colour = "#5a5a5a") +
geom_hline(aes(yintercept = 0),
col = '#66C2A4',
size = .5) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1),
name = (expression(bold(
atop("Protein Concentration (μM)", "Im9"["dimer"])
)))
) +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(-0.1, 0.1),
breaks = seq(-0.1, 0.1, by = 0.1),
name = "Residual (a.U.)"
) + mytheme()
emsa_full <- ggarrange(
emsa_plot,
emsa_res_plot,
nrow = 2,
ncol = 1,
widths = c(2, 1 / 2)
)
emsa_full
ggsave(
"figures/emsa_plot.pdf",
plot = emsa_full,
height = 15,
width = 20,
unit = "cm"
)
# Kable table of the EMSA Dataset
emsa %>%
select(-gel_length) %>%
knitr::kable(
digits = 2,
col.names = c(
"Concentration",
"Distance",
"Relative Front",
"Residuals",
"Actual Weight (Da)"
)
) %>%
kable_styling(font_size = 15, position = "center")
# Prepare the standards data
sec_standards <- standards %>%
group_by(protein) %>%
filter(absorbance_units == max(absorbance_units)) %>% # filter by the maximum absorbency units
summarise(vol) %>%
ungroup() %>%
mutate(
mw = recode(
# Add a column for the molecular weights of each protein
# Protein MWs
protein,
"Thyroglobulin" = 669000,
"Ferritin" = 440000,
"IgG" = 150000,
"Transferrin" = 81000,
"Ovalbumin" = 43000,
"Myoglobin" = 17000,
"Vitamin B12" = 1355
),
logmw = log(mw) # log10 of the MW
)
# Save processed data
write.csv(sec_standards, 'data/data-processed/sec_standards.csv')
# Getting the elution volume that corresponds to the maximum value of a curve
# a280 elution volume
a280_elution <-
format(round(sec_elution("a280"), digits = 2), scientific = FALSE)
# a254 elution volume
a254_elution <-
format(round(sec_elution("a254"), digits = 2), scientific = FALSE)
# Getting the molecular weight for the max elution for each wavelength using the sec_mw function
# a280 mw
a280_mw <- sec_mw("a280") # protein
# a254 mw
a254_mw <- sec_mw("a254") # protein + DNA
# Footprint size estimated by SEC
# footprint = a245 (protein + DNA) - a280 (protein) / avg base pair weight (660)
sec_footprint <-
as.numeric(round((a254_mw - a280_mw) / 660, digits = 2))
# Format mws for inline reporting
a280_mw <- format(round(a280_mw, digits = 2), scientific = FALSE)
a254_mw <- format(round(a254_mw, digits = 2), scientific = FALSE)
# Plot of the standards elution volumes
sec_plot <- sec %>%
mutate(protein = recode(protein, "a280" = "A280", "a254" = "A254")) %>%
ggplot(aes(x = vol,
y = absorbance,
colour = protein),
show.legend = TRUE) +
geom_line() +
scale_colour_brewer(name = "Protein",
palette = "Set2") +
scale_x_continuous(limits = c(13, 17)) +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 100)) +
mytheme() +
xlab("Elution Volume (mL)") +
ylab("Absorbance (mAU)")
ggsave(
"figures/sec_plot.pdf",
height = 15,
width = 20,
unit = "cm"
)
# make plot interactive with ggplotly
ggplotly(align = "center")
# Plot the SEC standards
standards_plot <- standards %>%
ggplot(aes(x = vol,
y = absorbance_units,
colour = protein),
show.legend = TRUE) +
geom_line() +
scale_colour_brewer(name = "Protein",
palette = "Set2") + # colour blind friendly
mytheme() +
scale_x_continuous(
expand = c(0, 0),
limits = c(9, 22),
breaks = seq(9, 22, by = 1),
name = "Elution Volume (mL)"
) + scale_y_continuous(
expand = c(0, 0),
limits = c(0, 100),
breaks = seq(0, 100, by = 10),
name = "A280 Absorbance Units (A.U.)"
)
# Make this interactive
ggplotly(standards_plot)
knitr::knit(text = unlist(pcr_plot))
emsa_plot <- emsa %>%
ggplot(aes(x = conc, y = rf)) +
geom_point(shape = 20,
size = 3) +
stat_function(fun = emsa_pred_intercept, colour = "#66C2A4") +
mytheme() +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(0.3, 0.7),
breaks = seq(0.3, 0.7, by = 0.20)
) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1)
) +
xlab(NULL) +
ylab(expression(paste(bold(
"Relative Front (a.U.)"
))))
# Plot the residuals and a line showing y = 0
emsa_res_plot <- emsa %>%
ggplot(aes(x = conc, y = residuals)) +
geom_point(shape = 20,
size = 3,
colour = "#5a5a5a") +
geom_hline(aes(yintercept = 0),
col = '#66C2A4',
size = .5) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1),
name = (expression(bold(
atop("Protein Concentration (μM) Im9~dimer~")
)))
) +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(-0.1, 0.1),
breaks = seq(-0.1, 0.1, by = 0.1),
name = "Residual (a.U.)"
) + mytheme()
emsa_full <- ggarrange(
emsa_plot,
emsa_res_plot,
nrow = 2,
ncol = 1,
widths = c(2, 1 / 2)
)
emsa_full
ggsave(
"figures/emsa_plot.pdf",
plot = emsa_full,
height = 15,
width = 20,
unit = "cm"
)
Cite(refs, textual = TRUE, "Fuller2017-ex")
Cite(refs, textual = TRUE, "^Fuller2017-ex^")
knitr::include_graphics("images/mu_transposition.jpg")
# Create a dataframe to compare the estimate molexular weights to those listed in ProtParam
mw <- data.frame(
"higam" = c(
"His^13^-HiGam Monomer",
"His13-HiGam Dimer",
"His7-HiGam Monomer",
"His7-HiGam Dimer"
),
"prot_param" = c("22491.54", "44983.08", "30626.50", "61253.00"),
"sds_page" = c(
sds$actual_weight[2], # Extracting MW from the SDS data
sds$actual_weight[2] * 2, # Multiply to get the dimer MW
sds$actual_weight[6],
sds$actual_weight[6] * 2 # Multiply to get the dimer MW
),
"sec" = c(NA, NA, (as.numeric(a280_mw) / 2), a280_mw) # MW estimated by SEC
)
# Make a Kabe table for the MW data
mw %>% knitr::kable(
caption = "Molecular weight was determined using Rf of bands and the linear regression equation acquired by the linear regression analysis of the MW ladder bands. Expected weights were obtained by ExPASy ProtParam.",
digits = 2,
col.names = c("HiGam",
"ProtParam",
"SDS-PAGE",
"SEC")
) %>%
kable_styling(font_size = 15)
# Save processed data
write.csv(mw, 'data/data-processed/mw.csv')
# Create a dataframe to compare the estimate molexular weights to those listed in ProtParam
mw <- data.frame(
"higam" = c(
"His13-HiGam Monomer",
"His13-HiGam Dimer",
"His7-HiGam Monomer",
"His7-HiGam Dimer"
),
"prot_param" = c("22491.54", "44983.08", "30626.50", "61253.00"),
"sds_page" = c(
sds$actual_weight[2], # Extracting MW from the SDS data
sds$actual_weight[2] * 2, # Multiply to get the dimer MW
sds$actual_weight[6],
sds$actual_weight[6] * 2 # Multiply to get the dimer MW
),
"sec" = c(NA, NA, (as.numeric(a280_mw) / 2), a280_mw) # MW estimated by SEC
)
# Make a Kabe table for the MW data
mw %>% knitr::kable(
caption = "Molecular weight was determined using Rf of bands and the linear regression equation acquired by the linear regression analysis of the MW ladder bands. Expected weights were obtained by ExPASy ProtParam.",
digits = 2,
col.names = c("HiGam",
"ProtParam",
"SDS-PAGE",
"SEC")
) %>%
kable_styling(font_size = 15)
# Save processed data
write.csv(mw, 'data/data-processed/mw.csv')
my_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", (devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)))
# Required packages
not_installed <- my_packages[!(my_packages %in% installed.packages()[ , "Package"])]    # Extract not installed packages
if(length(not_installed)) install.packages(not_installed)                               # Install not installed packages
remove.packages("wordcountaddin")
my_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", (devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)))
my_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", (devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)))
# Required packages
not_installed <- my_packages[!(my_packages %in% installed.packages()[ , "Package"])]    # Extract not installed packages
remove.packages("wordcountaddin")
``` {r}
# Required Packages
my_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", "wordcountaddin") # Required packages
Extract not installed packages
not_installed <- my_packages[!(my_packages %in% installed.packages()[ , "Package"])]
# Install not installed packages
if(length(not_installed)) install.packages(not_installed)
```
install.packages(not_installed)
``` {r}
# Required Packages
cran_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", "wordcountaddin")
# Extract not installed packages
not_installed <- cran_packages[!(cran_packages %in% installed.packages()[ , "Package"])]
# Install not installed packages
if(length(not_installed)) install.packages(not_installed)
install.packages(not_installed)
# Install wordcount package from GitHub
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
```
# Install wordcount package from GitHub
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
```
# Load the tidyverse. Functions are used for tidying data and creating plots via ggplot2.
library(tidyverse)
# Load plotly. Plotly converts static ggplot to an interactive plot.
library(plotly)
# Load ggpubr. Combines multiple ggplots into a single plot.
library(ggpubr)
# Load RefManageR. Provides tools for importing and working with bibliographic references.
library(RefManageR)
# Load kableExtra. Table generation.
library(kableExtra)
# Load showtext. Allows use of Google fonts in ggplots.
library(showtext)
# Load wordcountaddin. Counts words and characters in text in an R markdown document.
library(wordcountaddin)
wordcountaddin
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
``` {r}
# Required Packages
cran_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", "devtools")
# Extract not installed packages
not_installed <- cran_packages[!(cran_packages %in% installed.packages()[ , "Package"])]
# Install not installed packages
if(length(not_installed)) install.packages(not_installed)
# Install wordcount package from GitHub
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
```
if(length(not_installed)) install.packages(not_installed)   devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
wordcountaddin[!(wordcountaddin %in% installed.packages()[ , "Package"])]
!(wordcountaddin %in% installed.packages()[ , "Package"])]
"wordcountaddin"[!(wordcountaddin %in% installed.packages()[ , "Package"])]
"wordcountaddin"[!("wordcountaddin" %in% installed.packages()[ , "Package"])]
if(length("wordcountaddin"[!("wordcountaddin" %in% installed.packages()[ , "Package"])])) devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
remove.packages("wordcountaddin")
# Required Packages
cran_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", "devtools")
# Extract not installed packages
not_installed <- cran_packages[!(cran_packages %in% installed.packages()[ , "Package"])]
# Install not installed packages
if(length(not_installed)) install.packages(not_installed)
if(length("wordcountaddin"[!("wordcountaddin" %in% installed.packages()[ , "Package"])])) devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
if(length(not_installed=="wordcountaddin")) install.packages(not_installed)
```
not_installed=="wordcountaddin"
not_installed="wordcountaddin"
if(length(not_installed=="wordcountaddin")) install.packages(not_installed)
install.packages(not_installed)
length(not_installed=="wordcountaddin")
length(not_installed=="wordcountaddin")length(not_installed==!wordcountaddin)
length(not_installed==!wordcountaddin)
length(not_installed==!"wordcountaddin)
length(not_installed==!"wordcountaddin")
length(not_installed=="wordcountaddin")
length(not_installed==!"wordcountaddin")
length(not_installed!="wordcountaddin")
remove.packages("wordcountaddin")
cran_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", "devtools", "wordcountaddin")
# Extract not installed packages
not_installed <- cran_packages[!(cran_packages %in% installed.packages()[ , "Package"])]
# Install not installed packages
if(length(not_installed!="wordcountaddin")) install.packages(not_installed!="wordcountaddin")
if(length(not_installed=="wordcountaddin") devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
if(length(not_installed=="wordcountaddin")devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
```
if(length(not_installed=="wordcountaddin")
# Required Packages
cran_packages <- c("tidyverse", "plotly", "ggpubr", "RefManageR", "kableExtra", "showtext", "devtools", "wordcountaddin")
# Extract not installed packages
not_installed <- cran_packages[!(cran_packages %in% installed.packages()[ , "Package"])]
# Install not installed packages
if(length(not_installed!="wordcountaddin")) install.packages(not_installed!="wordcountaddin")
if(length(not_installed=="wordcountaddin")) devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
