RefManageR::PrintBibliography(pkgs)
RefManageR::PrintBibliography(refs)
pcr_plot
# plot of the merged PCR data showing the expressed genes and the percentage difference of actual size to expected size
pcr_plot <- pcr_full %>%
ggplot(aes(
x = gene,
y = diff,
fill = library,
text = paste(
"Library: ",
library,
"<br>Amplicon: ",
gene,
"<br>Difference: ",
round(diff),
"%",
"<br>Expected Size (bp): ",
expected_size,
"<br>Actual Size (bp):",
round(actual_size)
)
)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 0.25) +
mytheme() +
scale_fill_brewer(name = "DNA Library",
labels = c("cDNA", "gDNA"),
palette = "Set3",
) +
labs(y = "Percentage Difference to Expected Size",
x = "Amplicon")
pcr_plot
pcr_full
# plot of the merged PCR data showing the expressed genes and the percentage difference of actual size to expected size
pcr_plot <- pcr_full %>%
ggplot(aes(
x = gene,
y = diff,
fill = library,
text = paste(
"Library: ",
library,
"<br>Amplicon: ",
gene,
"<br>Difference: ",
round(diff),
"%",
"<br>Expected Size (bp): ",
expected_size,
"<br>Actual Size (bp):",
round(actual_size)
)
)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 0.25) +
mytheme() +
scale_fill_brewer(name = "DNA Library",
labels = c("cDNA", "gDNA"),
palette = "Set3",
) +
labs(y = "Percentage Difference to Expected Size",
x = "Amplicon")
pcr_plot
5
knitr::opts_chunk$set(
include = FALSE,
echo = FALSE,
fig.align = "center",
fig.retina = 3,
message = FALSE,
warning = FALSE)
source("../R/00-pkgs.R", local = knitr::knit_global())
knitr::opts_chunk$set(
include = FALSE,
echo = FALSE,
fig.align = "center",
fig.retina = 3,
message = FALSE,
warning = FALSE)
source("../R/00-pkgs.R", local = knitr::knit_global())
font_add_google("Montserrat", "Montserrat")
# turn on showtext
showtext_auto()
source("../R/themes.R", local = knitr::knit_global())
knitr::write_bib(
c(
"base",
"RefManageR",
"tidyverse",
"rmarkdown",
"plotly",
"ggpubr",
"htmltools",
"kableExtra",
"showtext"
),
width = 80,
prefix = "",
file = "../bibliography/pkgs.bib"
)
RefManageR::BibOptions(
check.entries = FALSE,
bib.style = "authoryear",
cite.style = "authoryear",
style = "markdown",
hyperlink = FALSE,
dashed = FALSE,
longnamesfirst = FALSE,
max.names = 3
)
refs <-
RefManageR::ReadBib("../bibliography/refs.bib", check = FALSE)
pkgs <-
RefManageR::ReadBib("../bibliography/pkgs.bib", check = FALSE)
sec %>%
select(-x) %>%
pivot_wider(names_from = "protein",
values_from = "absorbance") %>%
knitr::kable(
booktabs = T,
digits = 2,
col.names = c("Volume",
"a254",
"a280")
) %>%
collapse_rows(columns = 1) %>%
kable_styling(font_size = 15) %>%
scroll_box(height = "300px")
knitr::opts_chunk$set(
include = FALSE,
echo = FALSE,
fig.align = "center",
fig.retina = 3,
message = FALSE,
warning = FALSE)
source("../R/00-pkgs.R", local = knitr::knit_global())
font_add_google("Montserrat", "Montserrat")
# turn on showtext
showtext_auto()
source("../R/themes.R", local = knitr::knit_global())
knitr::write_bib(
c(
"base",
"RefManageR",
"tidyverse",
"rmarkdown",
"plotly",
"ggpubr",
"htmltools",
"kableExtra",
"showtext"
),
width = 80,
prefix = "",
file = "../bibliography/pkgs.bib"
)
RefManageR::BibOptions(
check.entries = FALSE,
bib.style = "authoryear",
cite.style = "authoryear",
style = "markdown",
hyperlink = FALSE,
dashed = FALSE,
longnamesfirst = FALSE,
max.names = 3
)
refs <-
RefManageR::ReadBib("../bibliography/refs.bib", check = FALSE)
pkgs <-
RefManageR::ReadBib("../bibliography/pkgs.bib", check = FALSE)
# Source functions
source("../functions/count_words.R", local = knitr::knit_global()) # Reproducable Wordcount
source("../functions/relative_front.R", local = knitr::knit_global()) # Calculate relative front
source("../functions/sec_pred_intercept.R", local = knitr::knit_global()) # Predicts the intercept of the SEC data
source("../functions/emsa_pred_intercept.R", local = knitr::knit_global()) # Predicts the intercept of the EMSA data
source("../functions/sec_mw.R", local = knitr::knit_global()) # SEC molecular weights
source("../functions/nls.R", local = knitr::knit_global()) # Performs the NLS using the Langmuir binding isotherm (NLS)
# Load the PCR data
pcr <- read.csv("../data/data-raw/pcr.csv", header = TRUE) %>%
janitor::clean_names()
# Load the PCR calibration data for the gDNA library
gdna_calibration <-
read.csv("../data/data-raw/pcr_gdna_calibration.csv", header = TRUE) %>%
janitor::clean_names()
# Load the PCR calibration data for the cDNA library
cdna_calibration <-
read.csv("../data/data-raw/pcr_cdna_calibration.csv", header = TRUE) %>%
janitor::clean_names()
# Load the EMSA data
emsa <- read.csv("../data/data-raw/emsa.csv", header = TRUE) %>%
janitor::clean_names()
# Load the EMSA calibration data
emsa_calibration <-
read.csv("../data/data-raw/emsa_calibration.csv", header = TRUE) %>%
janitor::clean_names()
# Load the SEC standards data
standards <-
read.csv("../data/data-raw/sec_std.csv", header = TRUE) %>%
janitor::clean_names()
# Load the SEC data
sec <-
read.csv("../data/data-raw/sec_im9higam.csv", header = TRUE) %>%
janitor::clean_names()
# Rename the proteins and pivot them
standards <- standards %>%
rename(
c(
"Ferritin" = curve_ferritin,
"IgG" = curve_ig_g,
"Myoglobin" = curve_myoglobin,
"Ovalbumin" = curve_ovalbumin,
"Thyroglobulin" = curve_thyroglobulin,
"Transferrin" = curve_transferrin,
"Vitamin B12" = curve_vitamin_b12
)
) %>%
pivot_longer(cols = !c(x, vol),
names_to = "protein",
values_to = "absorbance_units")
# Pivot proteins
sec <- sec %>%
pivot_longer(cols = starts_with("a"),
names_to = "protein",
values_to = "absorbance")
# Separate the PCR data set by DNA library for analysis
gdna <- pcr %>% # gDNA PCR data
filter(library == "gDNA")
cdna <- pcr %>% # cDNA PCR data
filter(library == "cDNA")
#gDNA
gdna_mod <- lm(data = gdna_calibration, log ~ rf)
#cDNA
cdna_mod <- lm(data = cdna_calibration, log ~ rf)
# gDNA
gdna <- gdna %>%
mutate(
rf = relative_front(gdna),
# calculate the Rf
log = ((rf * gdna_mod$coefficients[2]) + gdna_mod$coefficients[1]),
# log = (y = mx+c)
actual_size = (10 ^ log),
# actual gene size = 10^log
diff = ((expected_size - actual_size) / expected_size * 100) # % difference between expected and actual sizes
)
# cDNA
cdna <- cdna %>%
mutate(
rf = relative_front(cdna),
# calculate the Rf
log = ((rf * cdna_mod$coefficients[2]) + cdna_mod$coefficients[1]),
# log = (y = mx+c)
actual_size = (10 ^ log),
# actual gene size = 10^log
diff = ((expected_size - actual_size) / expected_size * 100) # % difference between expected and actual sizes
)
# join gDNA & cDNA datasets
pcr_full <- full_join(gdna, cdna, by = NULL)
# plot of the merged PCR data showing the expressed genes and the percentage difference of actual size to expected size
pcr_plot <- pcr_full %>%
ggplot(aes(
x = gene,
y = diff,
fill = library,
text = paste(
"Library: ",
library,
"<br>Amplicon: ",
gene,
"<br>Difference: ",
round(diff),
"%",
"<br>Expected Size (bp): ",
expected_size,
"<br>Actual Size (bp):",
round(actual_size)
)
)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 0.25) +
mytheme() +
scale_fill_brewer(name = "DNA Library",
labels = c("cDNA", "gDNA"),
palette = "Set3",
) +
labs(y = "Percentage Difference to Expected Size",
x = "Amplicon")
ggsave(
"../figures/pcr_plot.pdf",
plot = pcr_plot,
height = 15,
width = 20,
unit = "cm"
)
ggplotly(pcr_plot, tooltip = c("text"), align = "center")
# Table of the full PCR dataset
pcr_full %>%
select(-primer, -gel_length) %>%
knitr::kable(
caption = "PCR Dataset",
booktabs = T,
digits = 2,
col.names = c(
"Library",
"Amplicon",
"Distance (cm)",
"Expected Size (bp)",
"Relative Front (Rf)",
"Log(Rf)",
"Actual Size (bp)",
"Size Difference (bp)"
)
) %>%
collapse_rows(columns = 1) %>%
kable_styling(font_size = 15, position = "center")
# prepare the PCR dataset for analysis
emsa <-
emsa %>% mutate(rf = (relative_front(emsa))) # calculate the relative front
# Calculate the difference between the measured rf and predicted rf value
# This is needed for the residuals
# Calculate residuals to the fit
emsa <- emsa %>%
mutate(residuals = rf - predict(NLS(emsa)))
kd <- summary(NLS(emsa))$coefficients[2, 1]
#
emsa_calibration <-
emsa_calibration %>% mutate(log = log(expected_size),
rf = relative_front(emsa_calibration))
emsa_lm <- lm(emsa_calibration$rf ~ emsa_calibration$log)
emsa_footprint <-
(((
max((emsa$rf) * emsa_lm$coefficients[2]) + emsa_lm$coefficients[1]
) - 330000) / (30626.5 / 2))
emsa_plot <- emsa %>%
ggplot(aes(x = conc, y = rf)) +
geom_point(shape = 20,
size = 3) +
stat_function(fun = emsa_pred_intercept, colour = "#66C2A4") +
mytheme() +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(0.3, 0.7),
breaks = seq(0.3, 0.7, by = 0.20)
) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1)
) +
xlab(NULL) +
ylab(expression(paste(bold(
"Relative Front (a.U.)"
))))
# Plot the residuals and a line showing y = 0
emsa_res_plot <- emsa %>%
ggplot(aes(x = conc, y = residuals)) +
geom_point(shape = 20,
size = 3,
colour = "#5a5a5a") +
geom_hline(aes(yintercept = 0),
col = '#66C2A4',
size = .5) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1),
name = (expression(bold(
atop("Protein Concentration (Î¼M)", "Im9"["dimer"])
)))
) +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(-0.1, 0.1),
breaks = seq(-0.1, 0.1, by = 0.1),
name = "Residual (a.U.)"
) + mytheme()
emsa_full <- ggarrange(
emsa_plot,
emsa_res_plot,
nrow = 2,
ncol = 1,
widths = c(2, 1 / 2)
)
emsa_full
ggsave("../figures/emsa_plot.pdf", plot = emsa_full,
height = 15,
width = 20, unit = "cm")
# EMSA Dataset
emsa %>%
select(-gel_length) %>%
knitr::kable(
booktabs = T,
digits = 2,
col.names = c("Concentration",
"Distance",
"Relative Front",
"Residuals")
) %>%
kable_styling(font_size = 15, position = "center")
# Prepare the standards data
sec_standards <- standards %>%
group_by(protein) %>%
filter(absorbance_units == max(absorbance_units)) %>% # filter by the maximum absorbency units
summarise(vol) %>%
ungroup() %>%
mutate(
mw = recode(
# Protein MWs
protein,
"Thyroglobulin" = 669000,
"Ferritin" = 440000,
"IgG" = 150000,
"Transferrin" = 81000,
"Ovalbumin" = 43000,
"Myoglobin" = 17000,
"Vitamin B12" = 1355
),
logmw = log(mw)
)
# Getting the elution volume that corresponds to the maximum value of a curve
a280_mw <- sec_mw("a280")
a254_mw <- sec_mw("a254")
sec_footprint <- (a254_mw - a280_mw) / 660
sec_plot <- sec %>%
ggplot(aes(x = vol,
y = absorbance,
colour = protein),
show.legend = TRUE) +
geom_line() +
scale_colour_brewer(name = "Protein",
labels = c("a280", "a254"),
palette = "Set2") +
scale_x_continuous(limits = c(13, 17)) +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 100)) +
mytheme() +
xlab("Elution Volume (mL)") +
ylab("Absorbance (mAU)")
ggsave(
"../figures/sec_plot.pdf",
height = 15,
width = 20,
unit = "cm"
)
ggplotly(align = "center")
sec_std_plot <- sec_standards %>%
ggplot(mapping = aes(y = vol, x = logmw)) +
geom_point() +
stat_function(fun = sec_pred_intercept,
geom = "line",
colour = "#8D9FCA") +
mytheme() +
scale_x_continuous(
expand = c(0.05, 0.05),
limits = c(7, 14),
breaks = seq(7, 14, by = 1),
name = "log (MW)"
) + scale_y_continuous(
expand = c(0.05, 0.05),
limits = c(9, 22),
breaks = seq(9, 22, by = 2),
name = "Elution Volume (mL)"
)
sec_std_plot
ggsave(
"../figures/sec_std_plot.pdf",
plot = sec_std_plot,
height = 15,
width = 20,
unit = "cm"
)
standards_plot <- standards %>%
ggplot(aes(x = vol,
y = absorbance_units,
colour = protein),
show.legend = TRUE) +
geom_line() +
scale_colour_brewer(name = "Protein",
palette = "Set2") + # colour blind friendly
mytheme() +
scale_x_continuous(
expand = c(0, 0),
limits = c(9, 22),
breaks = seq(9, 22, by = 1),
name = "Elution Volume (mL)"
) + scale_y_continuous(
expand = c(0, 0),
limits = c(0, 100),
breaks = seq(0, 100, by = 10),
name = "A280 Absorbance Units (A.U.)"
)
ggplotly(standards_plot)
ggsave(
"../figures/standards_plot.pdf",
plot = standards_plot,
height = 15,
width = 20,
unit = "cm"
)
sec %>%
select(-x) %>%
pivot_wider(names_from = "protein",
values_from = "absorbance") %>%
knitr::kable(
booktabs = T,
digits = 2,
col.names = c("Volume",
"a254",
"a280")
) %>%
collapse_rows(columns = 1) %>%
kable_styling(font_size = 15) %>%
scroll_box(height = "300px")
RefManageR::PrintBibliography(pkgs)
RefManageR::PrintBibliography(refs)
