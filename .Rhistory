read.csv("../data/data-raw/sec_std.csv", header = TRUE) %>%
janitor::clean_names()
# Load the SEC data
sec <-
read.csv("../data/data-raw/sec_im9higam.csv", header = TRUE) %>%
janitor::clean_names()
# Rename the proteins and pivot them
standards <- standards %>%
rename(
c(
"Ferritin" = curve_ferritin,
"IgG" = curve_ig_g,
"Myoglobin" = curve_myoglobin,
"Ovalbumin" = curve_ovalbumin,
"Thyroglobulin" = curve_thyroglobulin,
"Transferrin" = curve_transferrin,
"Vitamin B12" = curve_vitamin_b12
)
) %>%
pivot_longer(cols = !c(x, vol),
names_to = "protein",
values_to = "absorbance_units")
# Pivot proteins
sec <- sec %>%
pivot_longer(cols = starts_with("a"),
names_to = "protein",
values_to = "absorbance")
# Separate the PCR data set by DNA library for analysis
gdna <- pcr %>% # gDNA PCR data
filter(library == "gDNA")
cdna <- pcr %>% # cDNA PCR data
filter(library == "cDNA")
#gDNA
gdna_mod <- lm(data = gdna_calibration, log ~ rf)
#cDNA
cdna_mod <- lm(data = cdna_calibration, log ~ rf)
# gDNA
gdna <- gdna %>%
mutate(
rf = relative_front(gdna), # calculate the Rf
log = ((rf * gdna_mod$coefficients[2]) + gdna_mod$coefficients[1]), # log = (y = mx+c)
actual_size = (10 ^ log), # actual gene size = 10^log
diff = ((expected_size - actual_size) / expected_size * 100) # % difference between expected and actual sizes
)
# cDNA
cdna <- cdna %>%
mutate(
rf = relative_front(cdna),# calculate the Rf
log = ((rf * cdna_mod$coefficients[2]) + cdna_mod$coefficients[1]),# log = (y = mx+c)
actual_size = (10 ^ log), # actual gene size = 10^log
diff = ((expected_size - actual_size) / expected_size * 100) # % difference between expected and actual sizes
)
# join gDNA & cDNA datasets
pcr_full <- full_join(gdna, cdna, by = NULL)
# plot of the merged PCR data showing the expressed genes and the percentage difference of actual size to expected size
pcr_plot <- pcr_full %>%
ggplot(aes(
x = gene,
y = diff,
fill = library,
text = paste(
"Library: ",
library,
"<br>Amplicon: ",
gene,
"<br>Difference: ",
round(diff),
"%",
"<br>Expected Size (bp): ",
expected_size,
"<br>Actual Size (bp):",
round(actual_size)
)
)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 0.25) +
mytheme() +
scale_fill_brewer(name = "DNA Library",
labels = c("cDNA", "gDNA"),
palette = "Set3",
) +
labs(y = "Percentage Difference to Expected Size", x = "Amplicon")
# interactive plot with ggplotly to allow hover
htmltools::div(ggplotly(pcr_plot, tooltip = c("text")), align = "center")
# Table of the full PCR dataset
pcr_full %>%
select(-primer, -gel_length) %>%
knitr::kable(
booktabs = T,
digits = 2,
col.names = c(
"Library",
"Amplicon",
"Distance (cm)",
"Expected Size (bp)",
"Relative Front (Rf)",
"Log(Rf)",
"Actual Size (bp)",
"Size Difference (bp)"
)) %>%
collapse_rows(columns = 1) %>%
kable_styling(font_size = 15, position = "center")
# prepare the PCR dataset for analysis
emsa <-
emsa %>% mutate(rf = (relative_front(emsa))) # calculate the relative front
#
emsa_calibration <-
emsa_calibration %>% mutate(log = log(expected_size),
rf = relative_front(emsa_calibration))
# Calculate the difference between the measured rf and predicted rf value
# This is needed for the residuals
# Calculate residuals to the fit
emsa <- emsa %>%
mutate(residuals = rf - predict(NLS(emsa)))
kd <- summary(NLS(emsa))$coefficients[2,1]
emsa_footprint <- (max((emsa$actual_size) - 330000) / (30626.5 / 2))
emsa_plot <- emsa %>%
ggplot(aes(x = conc, y = rf)) +
geom_point(shape = 20,
size = 3,
colour = "black") +
stat_function(fun = emsa_pred_intercept, colour = "#66C2A4") +
mytheme() +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(0.3, 0.7),
breaks = seq(0.3, 0.7, by = 0.20)
) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1)
) +
xlab(NULL) +
ylab(expression(paste(bold(
"Relative Front (a.U.)"
))))
# Plot the residuals and a line showing y = 0
emsa_res_plot <- emsa %>%
ggplot(aes(x = conc, y = residuals)) +
geom_point(shape = 20,
size = 3,
colour = "black") +
geom_hline(aes(yintercept = 0),
col = '#66C2A4',
size = .5) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1),
name = (expression(bold(
atop("Protein Concentration (μM)", "Im9"["dimer"])
)))
) +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(-0.1, 0.1),
breaks = seq(-0.1, 0.1, by = 0.1),
name = "Residual (a.U.)"
) + mytheme()
ggarrange(
emsa_plot,
emsa_res_plot,
nrow = 2,
ncol = 1,
widths = c(2, 1 / 2)
)
# EMSA Dataset
emsa %>%
select(-gel_length) %>%
knitr::kable(
booktabs = T,
digits = 2,
col.names = c(
"Concentration",
"Distance",
"Relative Front",
"Residuals")) %>%
kable_styling(font_size = 15, position = "center")
# Prepare the standards data
sec_standards <- standards %>%
group_by(protein) %>%
filter(absorbance_units == max(absorbance_units)) %>% # filter by the maximum absorbency units
summarise(vol) %>%
ungroup() %>%
mutate(
mw = recode( # Protein MWs
protein,
"Thyroglobulin" = 669000,
"Ferritin" = 440000,
"IgG" = 150000,
"Transferrin" = 81000,
"Ovalbumin" = 43000,
"Myoglobin" = 17000,
"Vitamin B12" = 1355
),
logmw = log(mw)
)
sec_mw("a280")
sec_mw("a254")
# Getting the elution volume that corresponds to the maximum value of a curve
a280_mw <- sec_mw("a280")
a254_mw <- sec_mw("a254")
# Getting the elution volume that corresponds to the maximum value of a curve
a280_mw <- sec_mw("a280")
a254_mw <- sec_mw("a254")
sec_footprint <- (a254_mw - a280_mw) / 660
sec_footprint
pcr_plot
install.packages("showtext")
library(showtext)
source("../R/themes.R", local = knitr::knit_global())
emsa_plot <- emsa %>%
ggplot(aes(x = conc, y = rf)) +
geom_point(shape = 20,
size = 3,
colour = "black") +
stat_function(fun = emsa_pred_intercept, colour = "#66C2A4") +
mytheme() +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(0.3, 0.7),
breaks = seq(0.3, 0.7, by = 0.20)
) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1)
) +
xlab(NULL) +
ylab(expression(paste(bold(
"Relative Front (a.U.)"
))))
# Plot the residuals and a line showing y = 0
emsa_res_plot <- emsa %>%
ggplot(aes(x = conc, y = residuals)) +
geom_point(shape = 20,
size = 3,
colour = "black") +
geom_hline(aes(yintercept = 0),
col = '#66C2A4',
size = .5) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1),
name = (expression(bold(
atop("Protein Concentration (μM)", "Im9"["dimer"])
)))
) +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(-0.1, 0.1),
breaks = seq(-0.1, 0.1, by = 0.1),
name = "Residual (a.U.)"
) + mytheme()
ggarrange(
emsa_plot,
emsa_res_plot,
nrow = 2,
ncol = 1,
widths = c(2, 1 / 2)
)
emsa_plot <- emsa %>%
ggplot(aes(x = conc, y = rf)) +
geom_point(shape = 20,
size = 3,
colour = "black") +
stat_function(fun = emsa_pred_intercept, colour = "#66C2A4") +
mytheme()
emsa_plot <- emsa %>%
ggplot(aes(x = conc, y = rf)) +
geom_point(shape = 20,
size = 3,
colour = "black") +
stat_function(fun = emsa_pred_intercept, colour = "#66C2A4") +
mytheme() +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(0.3, 0.7),
breaks = seq(0.3, 0.7, by = 0.20)
) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1)
) +
xlab(NULL) +
ylab(expression(paste(bold(
"Relative Front (a.U.)"
))))
# Plot the residuals and a line showing y = 0
emsa_res_plot <- emsa %>%
ggplot(aes(x = conc, y = residuals)) +
geom_point(shape = 20,
size = 3,
colour = "black") +
geom_hline(aes(yintercept = 0),
col = '#66C2A4',
size = .5) +
scale_x_continuous(
expand = c(0.02, 0.02),
limits = c(0, 4),
breaks = seq(0, 8, by = 1),
name = (expression(bold(
atop("Protein Concentration (μM)", "Im9"["dimer"])
)))
) +
scale_y_continuous(
expand = c(0.02, 0.02),
limits = c(-0.1, 0.1),
breaks = seq(-0.1, 0.1, by = 0.1),
name = "Residual (a.U.)"
) + mytheme()
ggarrange(
emsa_plot,
emsa_res_plot,
nrow = 2,
ncol = 1,
widths = c(2, 1 / 2)
)
knitr::write_bib(
c(
"base",
"RefManageR",
"tidyverse",
"rmarkdown",
"plotly",
"ggpubr",
"htmltools",
"kableExtra",
"showtext"
),
width = 80,
prefix = "",
file = "../bibliography/pkgs.bib"
)
library(Showtext)
library(showtext)
library(tidyverse)
library(plotly)
library(ggpubr)
library(RefManageR)
library(kableExtra)
library(showtext)
font_add_google(name = "Montserrat", family = "montserrat-sc")
font_add_google(name = "Montserrat", family = "montserrat-sc")
font_add_google
source("../R/themes.R", local = knitr::knit_global())
font_add_google(name = "Montserrat", family = "montserrat")
font_add_google(name = "Montserrat", family = "montserrat")
# turn on showtext
showtext_auto()
source("../R/themes.R", local = knitr::knit_global())
# turn on showtext
showtext_auto()
font_add_google(name = "Montserrat", family = "montserrat")
font_add_google(name = "Montserrat", family = "montserrat")
# turn on showtext
showtext_auto()
# plot of the merged PCR data showing the expressed genes and the percentage difference of actual size to expected size
pcr_plot <- showtext_auto(pcr_full %>%
ggplot(aes(
x = gene,
y = diff,
fill = library,
text = paste(
"Library: ",
library,
"<br>Amplicon: ",
gene,
"<br>Difference: ",
round(diff),
"%",
"<br>Expected Size (bp): ",
expected_size,
"<br>Actual Size (bp):",
round(actual_size)
)
)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 0.25) +
mytheme() +
scale_fill_brewer(name = "DNA Library",
labels = c("cDNA", "gDNA"),
palette = "Set3",
) +
labs(y = "Percentage Difference to Expected Size", x = "Amplicon"))
# interactive plot with ggplotly to allow hover
htmltools::div(ggplotly(pcr_plot, tooltip = c("text")), align = "center")
# interactive plot with ggplotly to allow hover
htmltools::div(ggplotly(pcr_plot, tooltip = c("text")), align = "center")
# turn on showtext
if(require(showtext))
font_add_google(name = "Montserrat", family = "Montserrat")
# turn on showtext
if(require(showtext))
source("../R/themes.R", local = knitr::knit_global())
font_add_google(name = "Montserrat", family = "Montserrat")
# turn on showtext
if(require(showtext))
source("../R/themes.R", local = knitr::knit_global())
font_add_google(name = "Montserrat", family = "Montserrat")
# turn on showtext
showtext_auto(TRUE)
source("../R/themes.R", local = knitr::knit_global())
font_paths()
font_files()
showtext_auto()
mytheme <-
function(base_size = 11,
base_family = "",
base_line_size = base_size / 22,
base_rect_size = base_size / 22)
{
theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) %+replace%
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "#5a5a5a",
size = rel(1)),
legend.key = element_blank(),
strip.background = element_rect(
fill = "white",
colour = "#5a5a5a",
size = rel(2)
),
complete = TRUE
)
} +
theme(plot.title = element_text(
family = "Montserrat",
color = "#5a5a5a",
face = "bold",
size = 16,
hjust = 0.5
)) +
theme(axis.title.y = element_text(
family = "Montserrat",
color = "#5a5a5a",
face = "bold",
size = 12,
vjust = 2
)) +
theme(axis.title.x = element_text(
family = "Montserrat",
color = "#5a5a5a",
face = "bold",
size = 12,
vjust = -2
))
kd <- summary(NLS(emsa))$coefficients[2,1]
emsa_footprint <- (max((emsa$actual_size) - 330000) / (30626.5 / 2))
emsa_footprint
emsa
kd
emsa
emsa_footprint <- (log(max((emsa$rf)) - 330000) / (30626.5 / 2))
emsa_footprint
emsa
emsa_footprint <- (log(max((emsa$rf)) - 330000) / (30626.5 / 2))
emsa_footprint
emsa_footprint <- (max((emsa$rf) - 330000) / (30626.5 / 2))
emsa_footprint
kd <- summary(NLS(emsa))$coefficients[2,1]
emsa_footprint <- log((max((emsa$rf) - 330000) / (30626.5 / 2)))
emsa_footprint
emsa_footprint <- (max((log(emsa$rf)) - 330000) / (30626.5 / 2))
emsa_footprint
emsa_footprint <- (max((emsa$rf) - 330000) / (30626.5 / 2))
emsa_footprint
emsa_calibration
emsa_lm <- lm(emsa_calibration$rf ~ ems_calibration$log)
emsa_lm <- lm(emsa_calibration$rf ~ emsa_calibration$log)
emsa_lm
emsa_lm <- lm(emsa_calibration$rf ~ emsa_calibration$log)
emsa_lm
emsa_lm
emsa_footprint <-
(((max((emsa$rf) * emsa_lm$coefficients[2]) + emsa_lm$coefficients[1]) - 330000) / (30626.5 / 2))
emsa_footprint
(
max((emsa$rf) * emsa_lm$coefficients[2]) + emsa_lm$coefficients[1]
)
emsa_footprint <-
(((
max((emsa$rf) * emsa_lm$coefficients[2]) + emsa_lm$coefficients[1]
) - 330000) / (30626.5 / 2))
kd <- summary(NLS(emsa))$coefficients[2,1]
emsa_lm <- lm(emsa_calibration$rf ~ emsa_calibration$log)
emsa_footprint <-
(((
max((emsa$rf) * emsa_lm$coefficients[2]) + emsa_lm$coefficients[1]
) - 330000) / (30626.5 / 2))
emsa_footprint
emsa_lm
emsa_lm$coefficients[2]
emsa_calibration
#
emsa_calibration <-
emsa_calibration %>% mutate(log = log(expected_size),
rf = relative_front(emsa_calibration))
emsa_lm <- lm(emsa_calibration$rf ~ emsa_calibration$log)
emsa_footprint <-
(((
max((emsa$rf) * emsa_lm$coefficients[2]) + emsa_lm$coefficients[1]
) - 330000) / (30626.5 / 2))
emsa_footprint
