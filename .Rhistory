digits = 2,
col.names = c(
"Column",
"Sample",
"Expected Weight (da)",
"Relative Front (Rf)",
"Actual Size (Da)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 3) %>%
kable_styling(font_size = 15, position = "center")
sds
sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length,
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = format((10 ^ log), scientific = FALSE),
diff = (((expected_weight - actual_weight) / expected_weight) * 100)
) %>%
select(-log, -gel_length, -distance)
sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length,
sds
sds %>%
sds
sds <- sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length,
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = format((10 ^ log), scientific = FALSE),
diff = (((expected_weight - actual_weight) / expected_weight) * 100)
) %>%
select(-log, -gel_length, -distance) %>%
knitr::kable(
caption = "Molecular weight was determined using Rf of bands and the linear regression equation acquired by the linear regression analysis of the MW ladder bands. Expected weights were obtained by ExPASy ProtParam.",
booktabs = T,
digits = 2,
col.names = c(
"Column",
"Sample",
"Expected Weight (da)",
"Relative Front (Rf)",
"Actual Size (Da)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 3) %>%
kable_styling(font_size = 15, position = "center")
sds
sds <- sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length,
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = format((10 ^ log), scientific = FALSE),
diff = (((expected_weight - actual_weight) / expected_weight) * 100)
)
knitr::opts_chunk$set(
include = FALSE,
echo = FALSE,
fig.align = "center",
fig.retina = 3,
message = FALSE,
warning = FALSE)
source("R/00-pkgs.R", local = knitr::knit_global())
font_add_google("Montserrat", "Montserrat")
# turn on showtext
showtext_auto()
source("R/themes.R", local = knitr::knit_global())
knitr::write_bib(
c(
"base",
"RefManageR",
"tidyverse",
"rmarkdown",
"plotly",
"ggpubr",
"kableExtra",
"showtext",
"ggplot2"
),
width = 80,
prefix = "",
file = "bibliography/pkgs.bib"
)
RefManageR::BibOptions(
check.entries = FALSE,
bib.style = "authoryear",
cite.style = "numeric",
style = "markdown",
hyperlink = "to.doc",
dashed = FALSE,
longnamesfirst = FALSE,
max.names = 2
)
refs <-
RefManageR::ReadBib("bibliography/refs.bib", check = FALSE)
pkgs <-
RefManageR::ReadBib("bibliography/pkgs.bib", check = FALSE)
knitr::include_graphics("images/mu_transposition.jpg")
# Source functions
source("functions/count_words.R", local = knitr::knit_global()) # Reproducable Wordcount
source("functions/relative_front.R", local = knitr::knit_global()) # Calculate relative front
source("functions/nls.R", local = knitr::knit_global()) # Performs the NLS using the Langmuir binding isotherm (NLS)
source("functions/emsa_pred_intercept.R", local = knitr::knit_global()) # Predicts the intercept of the EMSA data
source("functions/sec_pred_intercept.R", local = knitr::knit_global()) # Predicts the intercept of the SEC data
source("functions/sec_mw.R", local = knitr::knit_global()) # SEC molecular weights
source("functions/sec_elution.R", local = knitr::knit_global())
# Load the PCR data
pcr <- read.csv("data/data-raw/pcr.csv", header = TRUE) %>%
janitor::clean_names()
# Load the PCR calibration data for the gDNA library
gdna_calibration <-
read.csv("data/data-raw/pcr_gdna_calibration.csv", header = TRUE) %>%
janitor::clean_names()
# Load the PCR calibration data for the cDNA library
cdna_calibration <-
read.csv("data/data-raw/pcr_cdna_calibration.csv", header = TRUE) %>%
janitor::clean_names()
# Load the EMSA data
emsa <- read.csv("data/data-raw/emsa.csv", header = TRUE) %>%
janitor::clean_names()
# Load the EMSA calibration data
emsa_calibration <-
read.csv("data/data-raw/emsa_calibration.csv", header = TRUE) %>%
janitor::clean_names()
# Load the SEC standards data
standards <-
read.csv("data/data-raw/sec_std.csv", header = TRUE) %>%
janitor::clean_names()
# Load the SEC data
sec <-
read.csv("data/data-raw/sec_im9higam.csv", header = TRUE) %>%
janitor::clean_names()
# Load the SDS Paage data
sds <-
read.csv("data/data-raw/sds.csv", header = TRUE) %>%
janitor::clean_names()
# Load the SDS Calibration data
sds_calibration <-
read.csv("data/data-raw/sds_calibration.csv", header = TRUE) %>%
janitor::clean_names()
# Rename the proteins and pivot them
standards <- standards %>%
rename(
c(
"Ferritin" = curve_ferritin,
"IgG" = curve_ig_g,
"Myoglobin" = curve_myoglobin,
"Ovalbumin" = curve_ovalbumin,
"Thyroglobulin" = curve_thyroglobulin,
"Transferrin" = curve_transferrin,
"Vitamin B12" = curve_vitamin_b12
)
) %>%
pivot_longer(cols = !c(x, vol),
names_to = "protein",
values_to = "absorbance_units")
# Pivot proteins
sec <- sec %>%
pivot_longer(cols = starts_with("a"),
names_to = "protein",
values_to = "absorbance")
# Separate the PCR data set by DNA library for analysis
gdna <- pcr %>% # gDNA PCR data
filter(library == "gDNA")
cdna <- pcr %>% # cDNA PCR data
filter(library == "cDNA")
knitr::include_graphics("images/align.png")
knitr::include_graphics("images/map.png")
data.frame(
"amplicon" = c("HiA", "HiB", "HiGam"),
"e_value" = c("2e-149", "5e-86", "4e-70"),
"percent_identity" = c("39.61", "46.44", "60.53")
) %>%
knitr::kable(
caption = " Mu homologues in H. influenzae were aligned in BLAST, identifying HiA, HiB, and HiGam. Their E values and percent identity are consistent with them being homologues of Mu.",
digits = 2,
col.names = c("Amplicon",
"E Value",
"Percent Identity (%)")
) %>%
collapse_rows(columns = 1) %>%
kable_styling(font_size = 15)
#gDNA
gdna_mod <- lm(data = gdna_calibration, log ~ rf)
#cDNA
cdna_mod <- lm(data = cdna_calibration, log ~ rf)
# gDNA
gdna <- gdna %>%
mutate(
rf = relative_front(gdna),
# calculate the Rf
log = ((rf * gdna_mod$coefficients[2]) + gdna_mod$coefficients[1]),
# log = (y = mx+c)
actual_size = (10 ^ log),
# actual gene size = 10^log
diff = ((expected_size - actual_size) / expected_size * 100) # % difference between expected and actual sizes
)
# cDNA
cdna <- cdna %>%
mutate(
rf = relative_front(cdna),
# calculate the Rf
log = ((rf * cdna_mod$coefficients[2]) + cdna_mod$coefficients[1]),
# log = (y = mx+c)
actual_size = (10 ^ log),
# actual gene size = 10^log
diff = ((expected_size - actual_size) / expected_size * 100) # % difference between expected and actual sizes
)
# join gDNA & cDNA datasets
pcr_full <- full_join(gdna, cdna, by = NULL)
# plot of the merged PCR data showing the expressed genes and the percentage difference of actual size to expected size
pcr_plot <- pcr_full %>%
ggplot(aes(
x = gene,
y = diff,
fill = library,
text = paste(
"Library: ",
library,
"<br>Amplicon: ",
gene,
"<br>Difference: ",
round(diff),
"%",
"<br>Expected Size (bp): ",
expected_size,
"<br>Actual Size (bp):",
round(actual_size)
)
)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 0.25) +
mytheme() +
scale_fill_brewer(name = "DNA Library",
labels = c("cDNA", "gDNA"),
palette = "Set3",
) +
labs(y = "Percentage Difference to Expected Size",
x = "Amplicon")
ggsave(
"figures/pcr_plot.pdf",
plot = pcr_plot,
height = 15,
width = 20,
unit = "cm"
)
ggplotly(pcr_plot, tooltip = c("text"), align = "center")
knitr::include_graphics("images/pcr.png")
# Table of the full PCR dataset
pcr_full %>%
select(-primer, -gel_length) %>%
knitr::kable(
caption = "The actual amplicon sizes were calculated using the linear regression equation \\@ref(eq:log) acquired by linear regression analysis of the PCR ladder bands. Size Difference compares the expected and actual amplicon sizes.",
booktabs = T,
digits = 2,
col.names = c(
"Library",
"Amplicon",
"Distance (cm)",
"Expected Size (bp)",
"Relative Front (Rf)",
"Log(Rf)",
"Actual Size (bp)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 1) %>%
kable_styling(font_size = 15, position = "center")
knitr::include_graphics("images/western_blot.png")
sds_calibration <- sds_calibration %>%
mutate(rf = (
(sds_calibration$gel_length - sds_calibration$distance) / sds_calibration$gel_length
),
log = log10(weight_da))
sds_mod <- lm(sds_calibration$log ~ sds_calibration$rf)
sds <- sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length,
log = (sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1],
actual_weight = format((10 ^ log), scientific = FALSE),
diff = ((expected_weight - actual_weight) / expected_weight * 100)
)
sds_mod <- lm(sds_calibration$log ~ sds_calibration$rf)
sds_mod
sds_mod$coefficients[1]
sds_mod$coefficients[2]
sds$rf
sds
sds <- sds %>%
mutate(
rf = sds$gel_length - sds$distance / sds$gel_length,
log = (sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1],
actual_weight = format((10 ^ log), scientific = FALSE),
diff = ((expected_weight - actual_weight) / expected_weight * 100)
) %>%
select(-log, -gel_length, -distance) %>%
knitr::kable(
caption = "Molecular weight was determined using Rf of bands and the linear regression equation acquired by the linear regression analysis of the MW ladder bands. Expected weights were obtained by ExPASy ProtParam.",
booktabs = T,
digits = 2,
col.names = c(
"Column",
"Sample",
"Expected Weight (da)",
"Relative Front (Rf)",
"Actual Size (Da)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 3) %>%
kable_styling(font_size = 15, position = "center")
sds <- sds %>%
mutate(
rf = sds$gel_length - sds$distance / sds$gel_length
sds
sds <- sds %>%
mutate(
rf = sds$gel_length - sds$distance / sds$gel_length,
log = (sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1],
actual_weight = format((10 ^ log), scientific = FALSE),
diff = ((expected_weight - actual_weight) / expected_weight * 100)
)
sds
sds$gel_length - sds$distance
sds$gel_length
(sds$gel_length - sds$distance) / sds$gel_length
sds <- sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length
sds
sds <- sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length)
sds %>%
mutate(
rf = (sds$gel_length - sds$distance) / sds$gel_length)
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = (sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1])
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = ((expected_weight - actual_weight) / expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = (((expected_weight - actual_weight) / expected_weight) * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = ((expected_weight - actual_weight) / expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = (expected_weight - actual_weight / expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = expected_weight - actual_weight / expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = expected_weight - actual_weight / expected_weight * 100)
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = expected_weight - actual_weight / expected_weight * 100)
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = (expected_weight - actual_weight) / expected_weight * 100)
diff = ((expected_weight - actual_weight) / expected_weight * 100)
actual_weight = (format((10 ^ log), scientific = FALSE)),
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = ((expected_weight - actual_weight) / expected_weight * 100))
sds
actual_weight = (format((10 ^ log), scientific = FALSE))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE))
)
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE))
)
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = ((expected_weight - actual_weight) / expected_weight * 100))
(expected_weight - actual_weight) / expected_weight * 100)
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ sds$log), scientific = FALSE)),
diff = ((sds$expected_weight - sds$actual_weight) / sds$expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ (sds$log)), scientific = FALSE)),
diff = ((sds$expected_weight - sds$actual_weight) / sds$expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = ((sds$expected_weight - sds$actual_weight) / sds$expected_weight * 100))
sds <- sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ log), scientific = FALSE)),
diff = ((sds$expected_weight - sds$actual_weight) / sds$expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length)
sds
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ (sdslog)), scientific = FALSE)),
diff = ((sds$expected_weight - sds$actual_weight) / sds$expected_weight * 100))
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = (format((10 ^ (sds$log)), scientific = FALSE)),
diff = ((sds$expected_weight - sds$actual_weight) / sds$expected_weight * 100))
sds$log
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = (sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1])
sds %>%
mutate(rf = ((sds$gel_length - sds$distance) / sds$gel_length),
log = ((sds$rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1])
sds
mutate(rf = ((gel_length - distance) / gel_length),
sds %>%
mutate(rf = ((gel_length - distance) / gel_length),
log = ((rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = format((10 ^ log), scientific = FALSE)
sds %>%
sds %>%
mutate(rf = ((gel_length - distance) / gel_length),
log = ((rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = 10 ^ log,
diff = ((expected_weight - actual_weight) / expected_weight * 100))
sds %>%
mutate(rf = ((gel_length - distance) / gel_length),
log = ((rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = 10 ^ log,
diff = (expected_weight - actual_weight) / (expected_weight * 100))
sds %>%
mutate(rf = ((gel_length - distance) / gel_length),
log = ((rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = 10 ^ log,
diff = (expected_weight - actual_weight) / (expected_weight * 100)) %>%
select(-log, -gel_length, -distance) %>%
knitr::kable(
caption = "Molecular weight was determined using Rf of bands and the linear regression equation acquired by the linear regression analysis of the MW ladder bands. Expected weights were obtained by ExPASy ProtParam.",
booktabs = T,
digits = 2,
col.names = c(
"Column",
"Sample",
"Expected Weight (da)",
"Relative Front (Rf)",
"Actual Size (Da)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 3) %>%
kable_styling(font_size = 15, position = "center")
sds %>%
mutate(rf = ((gel_length - distance) / gel_length),
log = ((rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = 10 ^ log,
diff = ((expected_weight - actual_weight) / expected_weight) * 100)) %>%
sds %>%
mutate(rf = ((gel_length - distance) / gel_length),
log = ((rf * sds_mod$coefficients[2]) + sds_mod$coefficients[1]),
actual_weight = 10 ^ log,
diff = ((expected_weight - actual_weight) / expected_weight) * 100) %>%
select(-log, -gel_length, -distance) %>%
knitr::kable(
caption = "Molecular weight was determined using Rf of bands and the linear regression equation acquired by the linear regression analysis of the MW ladder bands. Expected weights were obtained by ExPASy ProtParam.",
booktabs = T,
digits = 2,
col.names = c(
"Column",
"Sample",
"Expected Weight (da)",
"Relative Front (Rf)",
"Actual Size (Da)",
"Size Difference (%)"
)
) %>%
collapse_rows(columns = 3) %>%
kable_styling(font_size = 15, position = "center")
